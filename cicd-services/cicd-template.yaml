#Complete simple CI/CD pipeline stack for Lambda
AWSTemplateFormatVersion: 2010-09-09
Parameters:
    projectid:
        Type: String
    repositorynamepath:
        Type: String
    repositoryprovider:
        Type: String
        AllowedValues: 
            - 'github'
            - 'aws'
    githubconnectionarn:
        Type: String
    sourcebranch:
        Type: String
        AllowedValues: 
            - 'main'
            - 'dev'        
Conditions:
    GHrep: !Equals
        - !Ref repositoryprovider
        - 'github'
    AWSrep: !Equals
        - !Ref repositoryprovider
        - 'aws'
    Masterbranch: !Equals
        - !Ref sourcebranch
        - 'main'
    Secondarybranch: !Equals
        - !Ref sourcebranch
        - 'dev'
    Awsmaster: !And
        - Condition: Masterbranch
        - Condition: AWSrep
        
Resources:
###Begin CI/CD Pipeline services setup
    #Event for Codecommit source change with target as CICD pipeline start.
    Sourcechangeevent:
        Condition: AWSrep
        Type: AWS::Events::Rule
        Properties:
            RoleArn: !GetAtt Sourceeventrole.Arn 
            Name: !Sub 'Repchangeevent${sourcebranch}${projectid}'
            State: ENABLED
            Targets:
                -   Id: 'pipelinestart'
                    RoleArn: !GetAtt Sourceeventrole.Arn
                    Arn: !Sub 
                        - 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipelinename}' 
                        - Pipelinename: !Ref Lambdapipeline
            EventPattern: 
                source: 
                    - 'aws.codecommit'
                detail-type:
                    - 'CodeCommit Repository State Change'
                resources:
                    - !GetAtt Codecommitrepository.Arn
                detail:
                    event: 
                        - 'referenceCreated'
                        - 'referenceUpdated'
                    referenceType: 
                        - 'branch'
                    referenceName: 
                        !If
                            - Masterbranch
                            - 'main'
                            - 'dev'
    #Retains one source repository once condition Masterbranch is recieved as input
    Codecommitrepository:
        Condition: Awsmaster
        Type: 'AWS::CodeCommit::Repository'
        Properties:
            RepositoryName: !Sub repositorynamepath
            Code:
                BranchName: main
    #Stage for executing buildspec.yml commands on ingested artifacts- in this case build from Dockerfile and push to ECR
    Buildstage:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: !Sub 'Deploymentbuild${sourcebranch}${projectid}'
            ServiceRole: !GetAtt Codebuildrole.Arn
            Source: 
                Type: CODEPIPELINE
            Cache:
                Type: LOCAL
                Modes: 
                    - LOCAL_DOCKER_LAYER_CACHE
            Environment:
                EnvironmentVariables: 
                        -   Name: 'Ecr'
                            Type: PLAINTEXT
                            Value: !Sub '${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com'
                        -   Name: 'EcrRepoName'
                            Type: PLAINTEXT
                            Value: !Select [1, !Split ["/", Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-EcrUri']]
                        -   Name: 'Branch'
                            Type: PLAINTEXT
                            Value: 
                                !If
                                    - Masterbranch
                                    - 'main'
                                    - 'dev'
                        -   Name: 'projectid'
                            Type: PLAINTEXT
                            Value: !Ref projectid           
                ComputeType: BUILD_GENERAL1_SMALL
                Image: aws/codebuild/standard:5.0
                Type: LINUX_CONTAINER
                PrivilegedMode: true
            Artifacts: 
                Type: CODEPIPELINE
    
    #Configures application compute service type and namespace
    Application:
        Type: AWS::CodeDeploy::Application
        Properties: 
            ApplicationName: !Sub 'lambdaappdeploy${sourcebranch}${projectid}'
            ComputePlatform: Lambda
    #Configures how rivisions are rolled out
    Deploygroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
            DeploymentGroupName: !Sub 'microservicedeployment${projectid}'
            ServiceRoleArn: !GetAtt Codedeployrole.Arn
            ApplicationName: !Ref Application
            AutoRollbackConfiguration:
                Events: 
                    - DEPLOYMENT_FAILURE
                Enabled: true
            DeploymentStyle:
                DeploymentOption: WITH_TRAFFIC_CONTROL
                DeploymentType: BLUE_GREEN
            DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce
    
    #Lambda action for sending test request to validate temp version
    Lambdaaction1:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub 'test-req-action-${sourcebranch}${projectid}'
            Environment:
                Variables: 
                    AppName: 
                        Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppName' 
                    projectid: !Ref projectid
            Handler: LambdaAction1.lambda_handler
            Role: !GetAtt Lambdaction1role.Arn
            Runtime: python3.7
            Code:
                S3Bucket: !Sub 'deploymentresources-${sourcebranch}${projectid}'
                S3Key: 'cicd/lambda-action1.zip'
    #Deployment action for swapping versions on main alias
    Lambdaaction2:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub 'deployment-action-${sourcebranch}${projectid}'
            Environment:
                Variables: 
                    AppName: 
                        Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppName' 
                    codedeploygroup: !Ref Deploygroup
                    livealias: 
                        Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AliasName'
                    codedeployapp: !Ref Application           
            Handler: LambdaAction2.lambda_handler
            Role: !GetAtt Lambdaction2role.Arn
            Runtime: python3.7
            Code:
                S3Bucket: !Sub 'deploymentresources-${sourcebranch}${projectid}'
                S3Key: 'cicd/lambda-action2.zip'
    #Assemble pipeline stages using CodePipeline service
    Lambdapipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            RoleArn: !GetAtt Codepipelinerole.Arn
            Name: !Sub 'microservice-deploy${sourcebranch}${projectid}'
            ArtifactStore:
                    Type: S3
                    Location: !Sub 'deploymentresources-${sourcebranch}${projectid}'
            Stages: 
                -   Name: 'GitSource'
                    Actions: 
                        !If 
                            - AWSrep
                            -   
                                -   Name: !Sub 'SourceRivisionCodeCommit${sourcebranch}'
                                    OutputArtifacts:
                                        - Name: CodecommitOutput
                                    RunOrder: 1
                                    ActionTypeId:
                                        Category: Source
                                        Owner: AWS 
                                        Provider: CodeCommit
                                        Version: 1 
                                    Configuration:
                                        RepositoryName: !GetAtt Codecommitrepository.Name
                                        BranchName: !If
                                            - Masterbranch
                                            - 'master'
                                            - 'dev' 
                                        PollForSourceChanges: false
                            -
                                -   Name: 'SourceRivisionGitHub'
                                    OutputArtifacts: 
                                        - Name: GithubOutput
                                    RunOrder: 1
                                    ActionTypeId:
                                        Category: Source
                                        Owner: AWS 
                                        Provider: CodeStarSourceConnection
                                        Version: 1
                                    Configuration:
                                        DetectChanges: true
                                        BranchName: !If
                                            - Masterbranch
                                            - 'main'
                                            - 'dev'
                                        FullRepositoryId: !Ref repositorynamepath
                                        ConnectionArn: !Ref githubconnectionarn
                      
                -   Name: 'LambdaBuild'
                    Actions: 
                        -   Name: 'ContainerBuildAction'
                            InputArtifacts: 
                                - Name: 
                                    !If 
                                        - AWSrep
                                        - CodecommitOutput
                                        - GithubOutput
                            OutputArtifacts:
                                - Name: BuildOutput
                            RunOrder: 1
                            Configuration:
                                ProjectName: !Ref Buildstage
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Provider: CodeBuild
                                Version: 1
                -   Name: 'LambdaTest'
                    Actions:        
                        -   Name: 'DevInvoke'
                            RunOrder: 1
                            Configuration: 
                                FunctionName: !Ref Lambdaaction1
                            ActionTypeId:
                                Category: Invoke
                                Owner: AWS
                                Provider: Lambda
                                Version: 1
                -   Name: 'LambdaDeploy'
                    Actions: 
                        -   Name: 'LambdaDeploy'
                            RunOrder: 1
                            Configuration: 
                                FunctionName: !Ref Lambdaaction2
                            ActionTypeId:
                                Category: Invoke
                                Owner: AWS
                                Provider: Lambda
                                Version: 1
    #Permissions for Eventbridge to start pipeline upon codecommit source change
    Sourceeventrole:
        Condition: AWSrep
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'sourceevent${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - events.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 'codepipeline:StartPipelineExecution'
                                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:microservice-deploy${sourcebranch}${projectid}' 
    #Permissions for codebuild container commands
    Codebuildrole:                  
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'buildpermissions${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - codebuild.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -   Effect: Allow
                                Action: 'logs:*'
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
                            -   Effect: Allow
                                Action: '*'
                                Resource: 
                                    !Sub 
                                        - 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrName}'
                                        - EcrName: !Select [1, !Split ["/", Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-EcrUri']]                           
                            -   Effect: Allow
                                Action: 'lambda:UpdateFunctionCode'
                                Resource: 
                                    Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppArn' 
                            -   Effect: Allow
                                Action: 
                                    - 's3:GetObject'
                                    - 's3:PutObject'
                                Resource: 
                                    !If
                                        -  AWSrep
                                        - !Sub 'arn:aws:s3:::deploymentresources-${sourcebranch}${projectid}/microservice-deploy/Codecommit/*'                                
                                        - !Sub 'arn:aws:s3:::deploymentresources-${sourcebranch}${projectid}/microservice-deploy/GithubOutp/*'
                            -   Effect: Allow
                                Action: 'ecr:GetAuthorizationToken'
                                Resource: '*'    
     
    #Permissions for Deploy onto lambda by the Deployment Group
    Codedeployrole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'deploypermissions${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - codedeploy.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: '*'

    #Permissions for Pipeline service access to underlying stages' actions
    Codepipelinerole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'pipelinepermissions${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - codepipeline.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            - !If 
                                - AWSrep
                                -   Effect: Allow
                                    Action: 'codecommit:*'
                                    Resource: !GetAtt Codecommitrepository.Arn
                                -   Effect: Allow
                                    Action: 
                                        - 'codestar-connections:*'
                                        - 'codestar:*'
                                    Resource: !Ref githubconnectionarn 
                            -   Effect: Allow
                                Action: 'lambda:InvokeFunction'
                                Resource: 
                                        -   !GetAtt Lambdaaction2.Arn
                                        -   !GetAtt Lambdaaction1.Arn
                            -   Effect: Allow
                                Action: 
                                    - 's3:PutObject' 
                                    - 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::deploymentresources-${sourcebranch}${projectid}/*'                            
                            -   Effect: Allow
                                Action: 'codebuild:*' 
                                Resource: !GetAtt Buildstage.Arn
                            -   Effect: Allow
                                Action: 'lambda:*' 
                                Resource: 
                                    Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppArn'                               
    #Permissions for Lambda action sending test request through to temp lambda/newest version
    Lambdaction1role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'action1permissions${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - lambda.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement: 
                            -   Effect: Allow
                                Action: 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::application-user-data-${projectid}/test/*'
                            -   Effect: Allow
                                Action: 'lambda:InvokeFunction'
                                Resource: 
                                    Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppArn' 
                            -   Effect: Allow
                                Action:
                                    - 'codepipeline:*'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: '*'
    #Permissions for Lambda action updating version
    Lambdaction2role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub 'action2permissions${sourcebranch}${projectid}'
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service: 
                                - lambda.amazonaws.com
                        Action: 
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: root                    
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:        
                            -   Effect: Allow
                                Action: 
                                    - 'codedeploy:Batch*'
                                    - 'codedeploy:CreateDeployment'
                                    - 'codedeploy:Get*'
                                    - 'codedeploy:List*'
                                    - 'codedeploy:RegisterApplicationRevision'
                                Resource: 
                                    - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${Application}/${Deploygroup}'
                                    - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.LambdaAllAtOnce' 
                                    - !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${Application}'
                            -   Effect: Allow
                                Action: 
                                    -   'logs:CreateLogGroup'
                                    -   'logs:CreateLogStream'
                                    -   'logs:PutLogEvents'
                                Resource: '*'
                            -   Effect: Allow
                                Action: 's3:GetObject'
                                Resource: !Sub 'arn:aws:s3:::deploymentresources-${projectid}/*'
                            -   Effect: Allow
                                Action:
                                    - 'codepipeline:*'
                                Resource: '*'
                            -   Effect: Allow
                                Action:
                                    - 'lambda:GetFunction'
                                    - 'lambda:ListVersionsByFunction'
                                Resource: 
                                    - Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AppArn'
                                    - Fn::ImportValue: !Sub 'microservicestack${sourcebranch}${projectid}-AliasArn'