AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  projectid:
    Type: String
  initialimageuri:
    Type: String
  sourcebranch:
    Type: String
    AllowedValues:
    - main
    - dev
Resources:
  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: application-user-data-${sourcebranch}${projectid}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: alias/aws/s3
  Useritemtable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: UserTable${sourcebranch}${projectid}
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: TransactionData
        AttributeType: S
      - AttributeName: name
        AttributeType: S
      - AttributeName: user
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: TransactionData
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: name-upc
        KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: user
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - id
          - TransactionData
          ProjectionType: INCLUDE
        ProvisionedThroughput:
          ReadCapacityUnits: '3'
          WriteCapacityUnits: '3'
  Restapi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: MainApi${sourcebranch}${projectid}
      StageName: Live
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Mainlambdafunction.Arn}:Live/invocations
              contentHandling: CONVERT_TO_BINARY
              responses: {}
      EndpointConfiguration: REGIONAL
  Mainlambdafunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: MainLambdaMS${sourcebranch}${projectid}
      PackageType: Image
      ImageUri:
        Ref: initialimageuri
      Environment:
        Variables:
          userbucket:
            Ref: ApplicationBucket
          usertable:
            Ref: Useritemtable
      Timeout: 12
      AutoPublishAlias: Live
      Events:
        post:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: Restapi
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
          Resource:
            Fn::GetAtt:
            - Useritemtable
            - Arn
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - Fn::GetAtt:
                - ApplicationBucket
                - Arn
              - /*
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Mainlambdafunction}
Outputs:
  AppArn:
    Value:
      Fn::GetAtt:
      - Mainlambdafunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AppArn
  AppName:
    Value:
      Ref: Mainlambdafunction
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AppName
  AliasArn:
    Value:
      Fn::Sub: ${Mainlambdafunction.Arn}:Live
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AliasArn
  AliasName:
    Value: Live
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AliasName
  EcrUri:
    Value:
      Fn::Select:
      - 0
      - Fn::Split:
        - ':'
        - Ref: initialimageuri
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcrUri
